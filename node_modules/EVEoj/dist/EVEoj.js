(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.EVEoj = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* globals window, HTMLElement */
/**!
 * is
 * the definitive JavaScript type testing library
 *
 * @copyright 2013-2014 Enrico Marino / Jordan Harband
 * @license MIT
 */

var objProto = Object.prototype;
var owns = objProto.hasOwnProperty;
var toStr = objProto.toString;
var symbolValueOf;
if (typeof Symbol === 'function') {
  symbolValueOf = Symbol.prototype.valueOf;
}
var isActualNaN = function (value) {
  return value !== value;
};
var NON_HOST_TYPES = {
  'boolean': 1,
  number: 1,
  string: 1,
  undefined: 1
};

var base64Regex = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/;
var hexRegex = /^[A-Fa-f0-9]+$/;

/**
 * Expose `is`
 */

var is = module.exports = {};

/**
 * Test general.
 */

/**
 * is.type
 * Test if `value` is a type of `type`.
 *
 * @param {Mixed} value value to test
 * @param {String} type type
 * @return {Boolean} true if `value` is a type of `type`, false otherwise
 * @api public
 */

is.a = is.type = function (value, type) {
  return typeof value === type;
};

/**
 * is.defined
 * Test if `value` is defined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is defined, false otherwise
 * @api public
 */

is.defined = function (value) {
  return typeof value !== 'undefined';
};

/**
 * is.empty
 * Test if `value` is empty.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is empty, false otherwise
 * @api public
 */

is.empty = function (value) {
  var type = toStr.call(value);
  var key;

  if (type === '[object Array]' || type === '[object Arguments]' || type === '[object String]') {
    return value.length === 0;
  }

  if (type === '[object Object]') {
    for (key in value) {
      if (owns.call(value, key)) { return false; }
    }
    return true;
  }

  return !value;
};

/**
 * is.equal
 * Test if `value` is equal to `other`.
 *
 * @param {Mixed} value value to test
 * @param {Mixed} other value to compare with
 * @return {Boolean} true if `value` is equal to `other`, false otherwise
 */

is.equal = function equal(value, other) {
  if (value === other) {
    return true;
  }

  var type = toStr.call(value);
  var key;

  if (type !== toStr.call(other)) {
    return false;
  }

  if (type === '[object Object]') {
    for (key in value) {
      if (!is.equal(value[key], other[key]) || !(key in other)) {
        return false;
      }
    }
    for (key in other) {
      if (!is.equal(value[key], other[key]) || !(key in value)) {
        return false;
      }
    }
    return true;
  }

  if (type === '[object Array]') {
    key = value.length;
    if (key !== other.length) {
      return false;
    }
    while (--key) {
      if (!is.equal(value[key], other[key])) {
        return false;
      }
    }
    return true;
  }

  if (type === '[object Function]') {
    return value.prototype === other.prototype;
  }

  if (type === '[object Date]') {
    return value.getTime() === other.getTime();
  }

  return false;
};

/**
 * is.hosted
 * Test if `value` is hosted by `host`.
 *
 * @param {Mixed} value to test
 * @param {Mixed} host host to test with
 * @return {Boolean} true if `value` is hosted by `host`, false otherwise
 * @api public
 */

is.hosted = function (value, host) {
  var type = typeof host[value];
  return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type];
};

/**
 * is.instance
 * Test if `value` is an instance of `constructor`.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an instance of `constructor`
 * @api public
 */

is.instance = is['instanceof'] = function (value, constructor) {
  return value instanceof constructor;
};

/**
 * is.nil / is.null
 * Test if `value` is null.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is null, false otherwise
 * @api public
 */

is.nil = is['null'] = function (value) {
  return value === null;
};

/**
 * is.undef / is.undefined
 * Test if `value` is undefined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is undefined, false otherwise
 * @api public
 */

is.undef = is.undefined = function (value) {
  return typeof value === 'undefined';
};

/**
 * Test arguments.
 */

/**
 * is.args
 * Test if `value` is an arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */

is.args = is.arguments = function (value) {
  var isStandardArguments = toStr.call(value) === '[object Arguments]';
  var isOldArguments = !is.array(value) && is.arraylike(value) && is.object(value) && is.fn(value.callee);
  return isStandardArguments || isOldArguments;
};

/**
 * Test array.
 */

/**
 * is.array
 * Test if 'value' is an array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an array, false otherwise
 * @api public
 */

is.array = Array.isArray || function (value) {
  return toStr.call(value) === '[object Array]';
};

/**
 * is.arguments.empty
 * Test if `value` is an empty arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty arguments object, false otherwise
 * @api public
 */
is.args.empty = function (value) {
  return is.args(value) && value.length === 0;
};

/**
 * is.array.empty
 * Test if `value` is an empty array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty array, false otherwise
 * @api public
 */
is.array.empty = function (value) {
  return is.array(value) && value.length === 0;
};

/**
 * is.arraylike
 * Test if `value` is an arraylike object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */

is.arraylike = function (value) {
  return !!value && !is.bool(value)
    && owns.call(value, 'length')
    && isFinite(value.length)
    && is.number(value.length)
    && value.length >= 0;
};

/**
 * Test boolean.
 */

/**
 * is.bool
 * Test if `value` is a boolean.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a boolean, false otherwise
 * @api public
 */

is.bool = is['boolean'] = function (value) {
  return toStr.call(value) === '[object Boolean]';
};

/**
 * is.false
 * Test if `value` is false.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is false, false otherwise
 * @api public
 */

is['false'] = function (value) {
  return is.bool(value) && Boolean(Number(value)) === false;
};

/**
 * is.true
 * Test if `value` is true.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is true, false otherwise
 * @api public
 */

is['true'] = function (value) {
  return is.bool(value) && Boolean(Number(value)) === true;
};

/**
 * Test date.
 */

/**
 * is.date
 * Test if `value` is a date.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a date, false otherwise
 * @api public
 */

is.date = function (value) {
  return toStr.call(value) === '[object Date]';
};

/**
 * Test element.
 */

/**
 * is.element
 * Test if `value` is an html element.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an HTML Element, false otherwise
 * @api public
 */

is.element = function (value) {
  return value !== undefined
    && typeof HTMLElement !== 'undefined'
    && value instanceof HTMLElement
    && value.nodeType === 1;
};

/**
 * Test error.
 */

/**
 * is.error
 * Test if `value` is an error object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an error object, false otherwise
 * @api public
 */

is.error = function (value) {
  return toStr.call(value) === '[object Error]';
};

/**
 * Test function.
 */

/**
 * is.fn / is.function (deprecated)
 * Test if `value` is a function.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a function, false otherwise
 * @api public
 */

is.fn = is['function'] = function (value) {
  var isAlert = typeof window !== 'undefined' && value === window.alert;
  return isAlert || toStr.call(value) === '[object Function]';
};

/**
 * Test number.
 */

/**
 * is.number
 * Test if `value` is a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a number, false otherwise
 * @api public
 */

is.number = function (value) {
  return toStr.call(value) === '[object Number]';
};

/**
 * is.infinite
 * Test if `value` is positive or negative infinity.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is positive or negative Infinity, false otherwise
 * @api public
 */
is.infinite = function (value) {
  return value === Infinity || value === -Infinity;
};

/**
 * is.decimal
 * Test if `value` is a decimal number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a decimal number, false otherwise
 * @api public
 */

is.decimal = function (value) {
  return is.number(value) && !isActualNaN(value) && !is.infinite(value) && value % 1 !== 0;
};

/**
 * is.divisibleBy
 * Test if `value` is divisible by `n`.
 *
 * @param {Number} value value to test
 * @param {Number} n dividend
 * @return {Boolean} true if `value` is divisible by `n`, false otherwise
 * @api public
 */

is.divisibleBy = function (value, n) {
  var isDividendInfinite = is.infinite(value);
  var isDivisorInfinite = is.infinite(n);
  var isNonZeroNumber = is.number(value) && !isActualNaN(value) && is.number(n) && !isActualNaN(n) && n !== 0;
  return isDividendInfinite || isDivisorInfinite || (isNonZeroNumber && value % n === 0);
};

/**
 * is.integer
 * Test if `value` is an integer.
 *
 * @param value to test
 * @return {Boolean} true if `value` is an integer, false otherwise
 * @api public
 */

is.integer = is['int'] = function (value) {
  return is.number(value) && !isActualNaN(value) && value % 1 === 0;
};

/**
 * is.maximum
 * Test if `value` is greater than 'others' values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is greater than `others` values
 * @api public
 */

is.maximum = function (value, others) {
  if (isActualNaN(value)) {
    throw new TypeError('NaN is not a valid value');
  } else if (!is.arraylike(others)) {
    throw new TypeError('second argument must be array-like');
  }
  var len = others.length;

  while (--len >= 0) {
    if (value < others[len]) {
      return false;
    }
  }

  return true;
};

/**
 * is.minimum
 * Test if `value` is less than `others` values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is less than `others` values
 * @api public
 */

is.minimum = function (value, others) {
  if (isActualNaN(value)) {
    throw new TypeError('NaN is not a valid value');
  } else if (!is.arraylike(others)) {
    throw new TypeError('second argument must be array-like');
  }
  var len = others.length;

  while (--len >= 0) {
    if (value > others[len]) {
      return false;
    }
  }

  return true;
};

/**
 * is.nan
 * Test if `value` is not a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is not a number, false otherwise
 * @api public
 */

is.nan = function (value) {
  return !is.number(value) || value !== value;
};

/**
 * is.even
 * Test if `value` is an even number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an even number, false otherwise
 * @api public
 */

is.even = function (value) {
  return is.infinite(value) || (is.number(value) && value === value && value % 2 === 0);
};

/**
 * is.odd
 * Test if `value` is an odd number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an odd number, false otherwise
 * @api public
 */

is.odd = function (value) {
  return is.infinite(value) || (is.number(value) && value === value && value % 2 !== 0);
};

/**
 * is.ge
 * Test if `value` is greater than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */

is.ge = function (value, other) {
  if (isActualNaN(value) || isActualNaN(other)) {
    throw new TypeError('NaN is not a valid value');
  }
  return !is.infinite(value) && !is.infinite(other) && value >= other;
};

/**
 * is.gt
 * Test if `value` is greater than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */

is.gt = function (value, other) {
  if (isActualNaN(value) || isActualNaN(other)) {
    throw new TypeError('NaN is not a valid value');
  }
  return !is.infinite(value) && !is.infinite(other) && value > other;
};

/**
 * is.le
 * Test if `value` is less than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if 'value' is less than or equal to 'other'
 * @api public
 */

is.le = function (value, other) {
  if (isActualNaN(value) || isActualNaN(other)) {
    throw new TypeError('NaN is not a valid value');
  }
  return !is.infinite(value) && !is.infinite(other) && value <= other;
};

/**
 * is.lt
 * Test if `value` is less than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if `value` is less than `other`
 * @api public
 */

is.lt = function (value, other) {
  if (isActualNaN(value) || isActualNaN(other)) {
    throw new TypeError('NaN is not a valid value');
  }
  return !is.infinite(value) && !is.infinite(other) && value < other;
};

/**
 * is.within
 * Test if `value` is within `start` and `finish`.
 *
 * @param {Number} value value to test
 * @param {Number} start lower bound
 * @param {Number} finish upper bound
 * @return {Boolean} true if 'value' is is within 'start' and 'finish'
 * @api public
 */
is.within = function (value, start, finish) {
  if (isActualNaN(value) || isActualNaN(start) || isActualNaN(finish)) {
    throw new TypeError('NaN is not a valid value');
  } else if (!is.number(value) || !is.number(start) || !is.number(finish)) {
    throw new TypeError('all arguments must be numbers');
  }
  var isAnyInfinite = is.infinite(value) || is.infinite(start) || is.infinite(finish);
  return isAnyInfinite || (value >= start && value <= finish);
};

/**
 * Test object.
 */

/**
 * is.object
 * Test if `value` is an object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an object, false otherwise
 * @api public
 */

is.object = function (value) {
  return toStr.call(value) === '[object Object]';
};

/**
 * is.hash
 * Test if `value` is a hash - a plain object literal.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a hash, false otherwise
 * @api public
 */

is.hash = function (value) {
  return is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval;
};

/**
 * Test regexp.
 */

/**
 * is.regexp
 * Test if `value` is a regular expression.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a regexp, false otherwise
 * @api public
 */

is.regexp = function (value) {
  return toStr.call(value) === '[object RegExp]';
};

/**
 * Test string.
 */

/**
 * is.string
 * Test if `value` is a string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a string, false otherwise
 * @api public
 */

is.string = function (value) {
  return toStr.call(value) === '[object String]';
};

/**
 * Test base64 string.
 */

/**
 * is.base64
 * Test if `value` is a valid base64 encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a base64 encoded string, false otherwise
 * @api public
 */

is.base64 = function (value) {
  return is.string(value) && (!value.length || base64Regex.test(value));
};

/**
 * Test base64 string.
 */

/**
 * is.hex
 * Test if `value` is a valid hex encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a hex encoded string, false otherwise
 * @api public
 */

is.hex = function (value) {
  return is.string(value) && (!value.length || hexRegex.test(value));
};

/**
 * is.symbol
 * Test if `value` is an ES6 Symbol
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a Symbol, false otherise
 * @api public
 */

is.symbol = function (value) {
  return typeof Symbol === 'function' && toStr.call(value) === '[object Symbol]' && typeof symbolValueOf.call(value) === 'symbol';
};

},{}],2:[function(require,module,exports){
module.exports = require('./lib/extend');


},{"./lib/extend":3}],3:[function(require,module,exports){
/*!
 * node.extend
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * @fileoverview
 * Port of jQuery.extend that actually works on node.js
 */
var is = require('is');

function extend() {
  var target = arguments[0] || {};
  var i = 1;
  var length = arguments.length;
  var deep = false;
  var options, name, src, copy, copy_is_array, clone;

  // Handle a deep copy situation
  if (typeof target === 'boolean') {
    deep = target;
    target = arguments[1] || {};
    // skip the boolean and the target
    i = 2;
  }

  // Handle case when target is a string or something (possible in deep copy)
  if (typeof target !== 'object' && !is.fn(target)) {
    target = {};
  }

  for (; i < length; i++) {
    // Only deal with non-null/undefined values
    options = arguments[i]
    if (options != null) {
      if (typeof options === 'string') {
          options = options.split('');
      }
      // Extend the base object
      for (name in options) {
        src = target[name];
        copy = options[name];

        // Prevent never-ending loop
        if (target === copy) {
          continue;
        }

        // Recurse if we're merging plain objects or arrays
        if (deep && copy && (is.hash(copy) || (copy_is_array = is.array(copy)))) {
          if (copy_is_array) {
            copy_is_array = false;
            clone = src && is.array(src) ? src : [];
          } else {
            clone = src && is.hash(src) ? src : {};
          }

          // Never move original objects, clone them
          target[name] = extend(deep, clone, copy);

        // Don't bring in undefined values
        } else if (typeof copy !== 'undefined') {
          target[name] = copy;
        }
      }
    }
  }

  // Return the modified object
  return target;
};

/**
 * @public
 */
extend.version = '1.1.3';

/**
 * Exports module.
 */
module.exports = extend;


},{"is":1}],4:[function(require,module,exports){
exports.M_per_LY = 9.4605284e+15; // meters per lightyear
exports.M_per_AU = 149597870700; // meters per AU

},{}],5:[function(require,module,exports){
exports.Const = require("./Const");
exports.Utils = require("./Utils");
exports.SDD = require("./SDD");
exports.map = require("./map");
if (exports.Utils.isBrowser) {
	exports.IGB = require("./IGB");
}

exports.V_MAJOR = 0;
exports.V_MINOR = 3;
exports.V_PATCH = 1;
exports.VERSION = exports.V_MAJOR + "." + exports.V_MINOR + "." + exports.V_PATCH;

},{"./Const":4,"./IGB":6,"./SDD":12,"./Utils":13,"./map":16}],6:[function(require,module,exports){
/* global jQuery: false */
/* global CCPEVE: false */
var $ = jQuery;

function IGBClick(ev) {
	var corp_id,
		chan,
		cctype,
		trustme,
		trust_req = false,
		href;

	href = $(this).attr("href");
	if (!href.match(/^eve:/i)) return; // huh.. that's odd
	ev.preventDefault();

	if (href.match(/^eve:trust:/i)) trust_req = true;
	href = href.replace(/^eve:\s*/i, "").replace(/^trust:\s*/i, "");

	/*
	if (typeof(navigator) != 'undefined' && navigator.hasOwnProperty('userAgent') && !navigator.userAgent.match(/EVE\-IGB/)) {
		// straight browser detection for IGB
		return;
	}
	*/
	if (typeof(CCPEVE) == "undefined") {
		// impl based detection for IGB
		return;
	}

	corp_id = $(this).data("igb-corpid");
	chan = $(this).data("igb-chan");
	cctype = $(this).data("igb-cctype");
	trustme = $(this).data("igb-trustme");

	if (corp_id && corp_id > 0) CCPEVE.showInfo(2, corp_id);
	if (chan) CCPEVE.joinChannel(chan);
	if (cctype) CCPEVE.createContract(cctype);
	if (trustme) CCPEVE.requestTrust(trustme);
}

$(function() {
	$("a[href^='eve:']").click(IGBClick);
});

},{}],7:[function(require,module,exports){
/* global Promise: false */
var isBrowser = typeof(window) !== "undefined";
var req_browser_ignore = require;
if (isBrowser) {
	// in browser, BlueBird embedded already by uglify
	//console.log("in browser require utils");
	//console.log("Promise: " + Promise);
	module.exports = Promise;
	//module.exports = require("bluebird");
} else {
	// bluebird required in a way that browserify will ignore (since using custom built for standalone)    
	module.exports = req_browser_ignore("bluebird");
}

},{}],8:[function(require,module,exports){
var Utils = require("./Utils");
var req_browser_ignore = require;

if (Utils.isBrowser) {
	// AJAX-based JSON loader; only for browserify/standalone version
	module.exports = require("./SDD.Source.json_browser.js");
} else {
	// nodeFS based JSON loader; required in a way that browserify will ignore
	module.exports = req_browser_ignore("./SDD.Source.json_node.js");
}

},{"./SDD.Source.json_browser.js":9,"./Utils":13}],9:[function(require,module,exports){
var extend = require("node.extend"),
	Source = require("./SDD.Source"),
	Table = require("./SDD.Table"),
	Utils = require("./Utils"),
	Promise = require("./Promise");

var P = exports.P = Utils.create(Source.P); // public methods, inherit from base Source class

exports.D = extend(true, {}, Source.D, {
	// default object properties
	cfg: {
		cache: true,
		datatype: "json",
		timeout: 0
	},
	jsonfiles: {}
});

exports.Create = function(config) {
	var obj = Utils.create(P);
	extend(true, obj, exports.D);
	obj.Config(config);
	return obj;
};

P.Config = function(config) {
	extend(this.cfg, config);
};

function MetainfDone(data, ctx) {
	var tbl,
		newt,
		i;

	if (!data) return Promise.reject(new Error("invalid data object"));
	if (!data.hasOwnProperty("formatID") || data.formatID != "1") return Promise.reject(new Error("unknown data format"));
	if (!data.hasOwnProperty("schema") || !data.hasOwnProperty("version")) return Promise.reject(new Error("data has no version information"));
	if (!data.hasOwnProperty("tables") || !data.hasOwnProperty("tables")) return Promise.reject(new Error("data has no table information"));
	this.version = data.version;
	this.schema = data.schema;
	if (data.hasOwnProperty("verdesc")) this.verdesc = data.verdesc;

	// reset stuff
	this.tables = {};
	this.jsonfiles = {};

	for (tbl in data.tables) {
		if (!data.tables.hasOwnProperty(tbl)) continue;

		// create a new table from our metadata
		newt = Table.Create(tbl, this, data.tables[tbl]);
		this.tables[newt.name] = newt;

		// collect a list of json sources
		for (i = 0; i < newt.segments.length; i++) {
			if (this.jsonfiles.hasOwnProperty(newt.segments[i].tag)) continue;
			this.jsonfiles[newt.segments[i].tag] = {
				loaded: false,
				p: null
			};
		}
	}

	return Promise.resolve({
		context: ctx,
		source: this
	});
}

P.LoadMeta = function(ctx) {
	var self = this;

	if (!this.cfg.hasOwnProperty("path") || typeof this.cfg.path != "string") {
		return Promise.reject(new Error("path is required"));
	}
	if (this.cfg.datatype != "json" && this.cfg.datatype != "jsonp") {
		return Promise.reject(new Error("invalid datatype: " + this.cfg.datatype));
	}

	return Utils.ajaxP(this.cfg.path + "/metainf." + this.cfg.datatype, {
		dataType: this.cfg.datatype,
		cache: this.cfg.cache,
		jsonp: false,
		timeout: this.cfg.timeout
	}).then(function(data) {
		return MetainfDone.apply(self, [data, ctx]);
	});
};

function LoadFileDone(res, rej, ctx, jsf, data) {
	if (!data || !data.hasOwnProperty("tables")) {
		return rej(new Error("invalid data object"));
	} else if (!data.hasOwnProperty("formatID") || data.formatID != "1") {
		return rej(new Error("unknown data format"));
	} else {
		this.jsonfiles[jsf].loaded = true;
		this.jsonfiles[jsf].data = data;
		return res({
			context: ctx,
			tag: jsf,
			data: data
		});
	}
}

P.LoadTag = function(jsf, ctx) {
	var self = this;
	if (this.jsonfiles[jsf].loaded) {
		return Promise.resolve({
			tag: jsf,
			data: this.jsonfiles[jsf].data
		});
	} else if (this.jsonfiles[jsf].p !== null) {
		return this.jsonfiles[jsf].p;
	} else {
		this.jsonfiles[jsf].p = new Promise(function(res, rej) {
			Utils.ajaxP(self.cfg.path + "/" + jsf + "." + self.cfg.datatype, {
				dataType: self.cfg.datatype,
				cache: self.cfg.cache,
				jsonp: false,
				timeout: self.cfg.timeout
			}).then(function(data) {
				LoadFileDone.apply(self, [res, rej, ctx, jsf, data]);
			});
		});
		return this.jsonfiles[jsf].p;
	}
};

},{"./Promise":7,"./SDD.Source":10,"./SDD.Table":11,"./Utils":13,"node.extend":2}],10:[function(require,module,exports){
// var Utils = require('./Utils');
var P = exports.P = {}; // public methods

exports.D = {
	// default object properties
	tables: {},
	version: null,
	verdesc: null,
	schema: null
};

// return promise:
//		reject({context: ctx, source: this, stats: status, error: errmsg});
//		resolve({context: ctx, source: this});
P.LoadMeta = function() {
	return null;
};

P.HasTable = function(tbl) {
	return this.tables.hasOwnProperty(tbl);
};

P.GetTables = function() {
	var tbl_list = [],
		tbl;
	for (tbl in this.tables) {
		if (!this.tables.hasOwnProperty(tbl)) continue;
		tbl_list.push(tbl);
	}

	return tbl_list;
};

P.GetTable = function(tbl) {
	if (!tbl || !this.tables.hasOwnProperty(tbl)) return null;
	return this.tables[tbl];
};

},{}],11:[function(require,module,exports){
var extend = require("node.extend"),
	Utils = require("./Utils"),
	Promise = require("./Promise");

var P = exports.P = {}; // public methods

// default object properties
exports.D = {
	src: null, // the EVEoj.SDD.Source that owns this table
	name: null, // the name of this table
	keyname: null, // the primary key name
	columns: [], // the list of columns
	colmap: {}, // a reverse lookup map for column indexes
	c: null, // shortcut to colmap
	colmeta: {}, // a map of metainfo about each complex column
	subkeys: [], // any subkeys (this implies a nested entry structure)
	data: {}, // the data for this table (shallow references into raw data from source)
	segments: [], // the segment information for this table
	length: 0, // the total number of entries in this table
	loaded: 0 // the total number of currently loaded entries
};
exports.Create = function(name, src, meta) {
	var obj,
		i,
		keyarr;

	obj = Utils.create(P);
	extend(true, obj, exports.D);

	// sort out relevant metadata details
	obj.src = src;
	obj.name = name;

	// determine the source(s) of this table's data
	if (meta.hasOwnProperty("j")) {
		// only one segment and it is stored with other stuff
		obj.segments.push({
			min: 0,
			max: -1,
			tag: meta.j,
			loaded: false,
			p: null
		});
	} else if (meta.hasOwnProperty("s")) {
		//  at least one segment that is stored independently
		for (i = 0; i < meta.s.length; i++) {
			obj.segments.push({
				min: meta.s[i][1],
				max: meta.s[i][2],
				tag: name + "_" + meta.s[i][0],
				loaded: false,
				p: null
			});
		}
	}

	// find out the key info for this table
	if (meta.hasOwnProperty("k")) {
		keyarr = meta.k.split(":");
		obj.keyname = keyarr.shift();
		for (i = 0; i < keyarr.length; i++) obj.subkeys.push(keyarr[i]);
	}

	// add keys to the column definition
	if (obj.keyname) obj.columns.push(obj.keyname);
	else obj.columns.push("index");
	for (i = 0; i < obj.subkeys.length; i++) {
		obj.columns.push(obj.subkeys[i]);
	}

	// add meta columns to column definition
	if (meta.hasOwnProperty("c")) {
		for (i = 0; i < meta.c.length; i++) obj.columns.push(meta.c[i]);
	}

	// create a reverse lookup map for columns
	for (i = 0; i < obj.columns.length; i++) obj.colmap[obj.columns[i]] = i;
	obj.colmap.index = 0;
	obj.c = obj.colmap;

	// grab the colmeta extra info
	if (meta.hasOwnProperty("m")) {
		extend(true, obj.colmeta, meta.m);
	}

	// grab the length
	if (meta.hasOwnProperty("l")) {
		obj.length = meta.l;
	}

	return obj;
};

// get the entry for the key provided; all keys must be numeric values for segmentation
P.GetEntry = function(key) {
	var i,
		nkey,
		skey;

	// get a guaranteed numeric and guaranteed string version of the key; numeric
	// is for segment comparison, string is for object property lookup
	nkey = parseInt(key, 10);
	if (isNaN(nkey)) return null;
	skey = nkey.toString(10);
	if (this.data.hasOwnProperty(skey)) return this.data[skey];

	// if we don't have this key, determine if we ought to by now
	for (i = 0; i < this.segments.length; i++) {
		if (nkey >= this.segments[i].min && (nkey <= this.segments[i].max || this.segments[i].max == -1)) {
			if (this.segments[i].loaded) return null; // the key should be in this segment
			else return false; // the segment isn't loaded yet
		}
	}

	return null;
};

// get the value for the key (or entry array) and column provided
P.GetValue = function(key, col) {
	var entry;
	if (key instanceof Array) entry = key;
	else entry = this.GetEntry(key);
	if (entry === null || entry === false) return entry;
	if (isNaN(col)) {
		if (!this.colmap.hasOwnProperty(col)) return null;
		col = this.colmap[col];
	}
	return entry[col];
};

function UnshiftIndexes(data, indexes) {
	var key, i;
	for (key in data) {
		if (!data.hasOwnProperty(key)) return;
		if (!data[key]) return;
		indexes.push(parseInt(key, 10));
		if (data[key] instanceof Array) {
			for (i = indexes.length - 1; i >= 0; i--) {
				data[key].unshift(indexes[i]);
			}
		} else UnshiftIndexes(data[key], indexes);
		indexes.pop();
	}
}

function SegLoadDone(res, rej, tag, data, done, ctx, progress) {
	var i;
	done.has++;
	for (i = 0; i < this.segments.length; i++) {
		if (this.segments[i].tag != tag) continue;
		if (data.tables.hasOwnProperty(this.name) && data.tables[this.name].hasOwnProperty("d")) {
			if (!data.tables[this.name].hasOwnProperty("U")) {
				// put the indexes into the first columns of every row
				UnshiftIndexes(data.tables[this.name].d, []);
				data.tables[this.name].U = true;
			}
			extend(this.data, data.tables[this.name].d);
			if (data.tables[this.name].hasOwnProperty("L")) {
				this.loaded += data.tables[this.name].L;
			} else if (done.needs == 1) {
				this.loaded = this.length;
			}
			this.segments[i].loaded = true;
		}
		break;
	}
	if (progress !== null) progress({
		context: ctx,
		table: this,
		has: done.has,
		needs: done.needs
	});
	if (done.has >= done.needs) res({
		context: ctx,
		table: this
	});
}

// load data for this table; returns a deferred promise object as this is an async thing
// if key is provided, loads ONLY the segment containing that key
P.Load = function(opts) {
	var self = this,
		all_needs = [],
		nkey,
		skey,
		i,
		segment,
		o = {
			context: null,
			key: null,
			progress: null
		};
	extend(o, opts);

	// figure out which segments need loading
	if (o.key === null) {
		// no key specified; load all segments
		for (i = 0; i < this.segments.length; i++) {
			if (!this.segments[i].loaded) {
				// this segment not yet loaded
				all_needs.push(i);
			}
		}
	} else {
		// determine which segment the key is in
		nkey = parseInt(o.key, 10);
		if (isNaN(nkey)) {
			return Promise.reject(new Error("invalid key; not numeric"));
		}
		skey = nkey.toString(10);
		segment = -1;
		for (i = 0; i < this.segments.length; i++) {
			if (nkey >= this.segments[i].min && (nkey <= this.segments[i].max || this.segments[i].max == -1)) {
				// the key should be in this segment
				segment = i;
				break;
			}
		}

		if (segment === -1) {
			return Promise.reject(new Error("invalid key; no segment contains it"));
		}
		if (!this.segments[segment].loaded) {
			all_needs.push(segment);
		}
	}

	if (all_needs.length < 1) {
		// all required data already loaded
		return Promise.resolve({
			context: o.context,
			table: this
		});
	}

	return new Promise(function(res, rej) {
		var done = {
			needs: all_needs.length,
			has: 0
		};
		var thenDone = function(arg) {
			SegLoadDone.apply(self, [res, rej, arg.tag, arg.data, done, o.context, o.progress]);
		};
		for (i = 0; i < all_needs.length; i++) {
			segment = self.segments[all_needs[i]];
			if (!segment.p) {
				// this segment not pending load
				segment.p = self.src.LoadTag(segment.tag);
			}
			segment.p.then(thenDone);
		}
	});
};

P.ColIter = function(colname) {
	var colnum;
	if (this.colmap.hasOwnProperty(colname)) {
		colnum = this.colmap[colname];
		return function(e) {
			return e[colnum];
		};
	} else return function() {
		return undefined;
	};
};

P.ColPred = function(colname, compare, value) {
	var colnum;
	if (this.colmap.hasOwnProperty(colname)) {
		colnum = this.colmap[colname];
		if (compare == "==" || compare == "eq") return function(e) {
			return e[colnum] == value;
		};
		if (compare == "!=" || compare == "ne") return function(e) {
			return e[colnum] != value;
		};
		if (compare == "===" || compare == "seq") return function(e) {
			return e[colnum] === value;
		};
		if (compare == "!==" || compare == "sne") return function(e) {
			return e[colnum] !== value;
		};
		else if (compare == ">" || compare == "gt") return function(e) {
			return e[colnum] > value;
		};
		else if (compare == ">=" || compare == "gte") return function(e) {
			return e[colnum] >= value;
		};
		else if (compare == "<" || compare == "lt") return function(e) {
			return e[colnum] < value;
		};
		else if (compare == "<=" || compare == "lte") return function(e) {
			return e[colnum] < value;
		};
	} else return function() {
		return false;
	};
};

},{"./Promise":7,"./Utils":13,"node.extend":2}],12:[function(require,module,exports){
// var Utils = require('./Utils');

exports.Source = require("./SDD.Source");
exports.Source.json = require("./SDD.Source.json");
exports.Table = require("./SDD.Table");

// create a new data source of the type specified with the config provided;
// EVEoj.data.Source.<type> handles the implementation details
exports.Create = function(type, config) {
	if (typeof exports.Source[type] === "undefined" || typeof exports.Source[type].Create !== "function") return null;
	return exports.Source[type].Create(config);
};

},{"./SDD.Source":10,"./SDD.Source.json":8,"./SDD.Table":11}],13:[function(require,module,exports){
/* global jQuery: false */
var Promise = require("./Promise");

exports.isBrowser = typeof(window) !== "undefined";

var F = function() {};

exports.create = (typeof Object.create === "function") ?
	Object.create :
	function(o) {
		// object create polyfill (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create)
		if (arguments.length > 1) throw Error("Second argument not supported");
		if (o === null) throw Error("Cannot set a null [[Prototype]]");
		if (typeof(o) !== "object") throw TypeError("Argument must be an object");
		F.prototype = o;
		return new F();
	};

exports.FormatNum = function(val, fixed) {
	var stringy = [],
		base = String(Math.floor(val)),
		k = -1,
		i = 0,
		decimals;

	fixed = fixed || 0;

	for (i = base.length - 1; i >= 0; i--) {
		if (k % 3 === 0) {
			k = 1;
			stringy.push(",");
		} else if (k == -1) {
			k = 1;
		} else {
			k++;
		}
		stringy.push(base.charAt(i));
	}
	base = "";
	for (i = stringy.length - 1; i >= 0; i--) {
		base = base.concat(stringy[i]);
	}

	if (fixed > 0) {
		decimals = val.toFixed(fixed);
		base += decimals.substring(decimals.length - fixed - 1);
	}

	return base;
};

var ajaxP = function(url, settings, cb) {
	jQuery.ajax(url, settings).done(function(data, status, jqxhr) {
		cb(null, data);
	}).fail(function(jqxhr, status, error) {
		cb(error, null);
	});
};
exports.ajaxP = Promise.promisify(ajaxP);

},{"./Promise":7}],14:[function(require,module,exports){
var extend = require("node.extend");
var Utils = require("./Utils");

var P = exports.P = {}; // public methods

exports.D = {
	ID: null,
	name: null,
	regionID: null,
	constellationID: null,
	pos: {
		x: null,
		y: null,
		z: null
	},
	posMax: {
		x: null,
		y: null,
		z: null
	},
	posMin: {
		x: null,
		y: null,
		z: null
	},
	border: null,
	fringe: null,
	corridor: null,
	hub: null,
	international: null,
	regional: null,
	constellation: null,
	contiguous: null,
	security: null,
	sec: null,
	radius: null,
	securityClass: null,
	wormholeClassID: null,
	stationCount: null,
	jumps: null
};
exports.Create = function(tbl, ID) {
	var obj,
		sys,
		col,
		nID;

	nID = parseInt(ID, 10);

	sys = tbl.GetEntry(nID);
	if (!sys) return null;
	obj = Utils.create(P);
	extend(true, obj, exports.D);
	col = tbl.colmap;

	obj.ID = nID;
	obj.name = sys[col.solarSystemName];
	obj.regionID = sys[col.regionID];
	obj.constellationID = sys[col.constellationID];
	obj.pos = {
		x: sys[col.center][0],
		y: sys[col.center][1],
		z: sys[col.center][2]
	};
	obj.posMin = {
		x: sys[col.min][0],
		y: sys[col.min][1],
		z: sys[col.min][2]
	};
	obj.posMax = {
		x: sys[col.max][0],
		y: sys[col.max][1],
		z: sys[col.max][2]
	};
	obj.border = sys[col.border];
	obj.fringe = sys[col.fringe];
	obj.corridor = sys[col.corridor];
	obj.hub = sys[col.hub];
	obj.international = sys[col.international];
	obj.regional = sys[col.regional];
	obj.constellation = sys[col.constellation];
	obj.contiguous = sys[col.contiguous];
	obj.security = sys[col.security];
	obj.sec = (obj.security > 0) ? obj.security.toFixed(1) : "0.0";
	obj.radius = sys[col.radius];
	obj.securityClass = sys[col.securityClass];
	obj.wormholeClassID = sys[col.wormholeClassID];
	obj.stationCount = (sys[col.stationCount]) ? sys[col.stationCount] : 0;
	obj.jumps = sys[col.jumps];

	return obj;
};

},{"./Utils":13,"node.extend":2}],15:[function(require,module,exports){
var extend = require("node.extend");
var Utils = require("./Utils");

var P = exports.P = {}; // public methods
exports.D = {
	// default object properties
	curidx: 0,
	map: null,
	keyset: []
};
exports.Create = function(map) {
	var obj,
		key,
		tbl;

	obj = Utils.create(P);
	extend(true, obj, exports.D);
	obj.map = map;
	tbl = map.tables["map" + map.space + "SolarSystems"].tbl;

	for (key in tbl.data) {
		if (!tbl.data.hasOwnProperty(key)) continue;
		obj.keyset.push(key);
	}

	return obj;
};

P.HasNext = function() {
	if (this.curidx < this.keyset.length) return true;
};

P.Next = function() {
	return this.map.GetSystem({
		id: this.keyset[this.curidx++]
	});
};

},{"./Utils":13,"node.extend":2}],16:[function(require,module,exports){
var extend = require("node.extend"),
	Const = require("./Const"),
	Utils = require("./Utils"),
	System = require("./map.System"),
	SystemIter = require("./map.SystemIter"),
	Promise = require("./Promise");

var P = exports.P = {}; // public methods for this class

exports.D = {
	// default properties for new instances
	src: null,
	tables: {},
	sysNameMap: {},
	sysNames: [],
	routeGraph: {},
	space: null,
	loaded: false,
	loadingP: null,
	c: {
		jumps: false,
		planets: false,
		moons: false,
		belts: false,
		gates: false,
		stars: false,
		objects: false,
		landmarks: false
	}
};

var sys_cache = null; // a place to put generated systems so we don't keep re-creating them

exports.Create = function(src, type, config) {
	if (!src || typeof src.HasTable != "function") return null;
	if (type != "K" && type != "X" && type != "J") return null;
	var obj = Utils.create(P);
	extend(true, obj, exports.D);
	if (config) extend(true, obj.c, config);
	obj.src = src;
	obj.space = type;

	return obj;
};

function LoadDone(res, rej, tbl, ctx) {
	var has = 0,
		needs = 0,
		key;

	for (key in this.tables) {
		if (!this.tables.hasOwnProperty(key)) continue;
		needs += this.tables[key].tbl.segments.length;
		if (key == tbl.name) this.tables[key].done = true;
		if (this.tables[key].done) {
			has += this.tables[key].tbl.segments.length;
		}
	}

	if (has >= needs) {
		LoadInit.apply(this);
		res({
			context: ctx,
			map: this
		});
	}
}

function LoadProgress(arg, progress) {
	var has = 0,
		needs = 0,
		key,
		i;

	if (progress === null) return;

	// arg: {context: ctx, table: this, has: done.has, needs: done.needs}
	// ignoring input progress info and counting finished segments ourself
	for (key in this.tables) {
		if (!this.tables.hasOwnProperty(key)) continue;
		needs += this.tables[key].tbl.segments.length;
		for (i = 0; i < this.tables[key].tbl.segments.length; i++) {
			if (this.tables[key].tbl.segments[i].loaded) has++;
		}
	}

	progress({
		context: arg.context,
		map: this,
		has: has,
		needs: needs
	});
}
P.Load = function(opts) {
	var self = this,
		t = this.tables,
		o = {
			context: null,
			progress: null
		};
	extend(o, opts);

	if (this.loaded) return Promise.resolve({
		context: o.context,
		map: this
	});
	if (this.loadingP) return this.loadingP;

	// setup required and optional tables
	t["map" + this.space + "Regions"] = false;
	t["map" + this.space + "Constellations"] = false;
	t["map" + this.space + "SolarSystems"] = false;
	if (this.space == "K" || this.space == "X") {
		if (this.c.jumps) {
			t["map" + this.space + "RegionJumps"] = false;
			t["map" + this.space + "ConstellationJumps"] = false;
			t["map" + this.space + "SolarSystemJumps"] = false;
		}
		if (this.c.belts) t["map" + this.space + "Belts"] = false;
		if (this.c.gates) t["map" + this.space + "Gates"] = false;
		if (this.c.landmarks) t.mapLandmarks = false;
	}
	if (this.c.planets) t["map" + this.space + "Planets"] = false;
	if (this.c.moons) t["map" + this.space + "Moons"] = false;
	if (this.c.stars) t["map" + this.space + "Stars"] = false;
	if (this.c.objects) t["map" + this.space + "SolarSystemObjects"] = false;

	this.loadingP = new Promise(function(res, rej) {
		var thenDone = function(arg) {
			LoadDone.apply(self, [res, rej, arg.table, arg.context]);
		};
		var progressFunc = null;
		var key;
		if (o.progress !== null) {
			progressFunc = function(arg) {
				LoadProgress.apply(self, [arg, o.progress]);
			};
		}
		for (key in t) {
			if (!t.hasOwnProperty(key)) continue;
			t[key] = {
				tbl: self.src.GetTable(key),
				done: false
			};
			if (!t[key].tbl) {
				rej(new Error("source does not contain requested table: " + key));
				return self.loadingP;
			}
			t[key].tbl.Load({
				context: o.context,
				progress: progressFunc
			}).then(thenDone);
		}
	});

	return this.loadingP;
};

function LoadInit() {
	var systbl = this.tables["map" + this.space + "SolarSystems"].tbl,
		colmap = systbl.colmap,
		solarSystemID,
		toSolarSystemID,
		system,
		i,
		sys;

	sys_cache = {};
	for (solarSystemID in systbl.data) {
		if (!systbl.data.hasOwnProperty(solarSystemID)) continue;
		system = systbl.data[solarSystemID];
		this.sysNameMap[system[colmap.solarSystemName]] = parseInt(solarSystemID, 10);
		this.sysNames.push(system[colmap.solarSystemName]);
		if (this.space != "J") {
			// create the routing graph used for path finding
			sys = {
				jumps: [],
				cont: system[colmap.contiguous],
				sec: system[colmap.security].toFixed(1),
				name: system[colmap.solarSystemName]
			};
			for (i = 0; i < system[colmap.jumps].length; i++) {
				toSolarSystemID = system[colmap.jumps][i];
				if (!systbl.data.hasOwnProperty(toSolarSystemID)) continue;
				sys.jumps.push(toSolarSystemID);
			}
			this.routeGraph[solarSystemID] = sys;
		}
	}
	this.sysNames.sort();
}

P.GetSystem = function(input) {
	var nSystemID,
		sSystemID;

	if (!input) return null;
	if (input.hasOwnProperty("name") && this.sysNameMap.hasOwnProperty(input.name)) nSystemID = this.sysNameMap[input.name];
	else if (input.hasOwnProperty("id")) nSystemID = parseInt(input.id, 10);
	else return null;
	sSystemID = nSystemID.toString(10);

	if (!sys_cache.hasOwnProperty(sSystemID)) {
		sys_cache[sSystemID] = System.Create(this.tables["map" + this.space + "SolarSystems"].tbl, nSystemID);
	}
	return sys_cache[sSystemID];
};

P.GetSystems = function() {
	return SystemIter.Create(this);
	// this.tables["map" + this.space + "SolarSystems"].tbl);
};

P.JumpDist = function(fromID, toID) {
	var systbl = this.tables["map" + this.space + "SolarSystems"].tbl,
		colmap = systbl.colmap,
		x1 = systbl.data[fromID][colmap.center][0],
		x2 = systbl.data[toID][colmap.center][0],
		y1 = systbl.data[fromID][colmap.center][1],
		y2 = systbl.data[toID][colmap.center][1],
		z1 = systbl.data[fromID][colmap.center][2],
		z2 = systbl.data[toID][colmap.center][2],
		dist;

	dist = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2) + Math.pow(z1 - z2, 2));
	return dist / Const.M_per_LY;
};

P.Route = function(fromSystemID, toSystemID, avoidList, avoidLow, avoidHi) {
	var route = [],
		avoids = {},
		sFromID,
		sToID,
		solarSystemID,
		currentID,
		systemID,
		nID,
		prevID,
		sys_td,
		td,
		i,
		tmp,
		testset = [],
		test_td,
		testidx,
		dist;

	sFromID = parseInt(fromSystemID, 10).toString(10);
	sToID = parseInt(toSystemID, 10).toString(10);
	if (!this.routeGraph.hasOwnProperty(sFromID) || !this.routeGraph.hasOwnProperty(sToID)) return route;

	// reset the route graph
	for (solarSystemID in this.routeGraph) {
		if (!this.routeGraph.hasOwnProperty(solarSystemID)) continue;
		this.routeGraph[solarSystemID].td = -1;
		this.routeGraph[solarSystemID].prevID = -1;
		this.routeGraph[solarSystemID].visited = false;
	}

	// populate avoid list lookup table
	if (avoidList && avoidList.length > 0) {
		for (i = 0; i < avoidList.length; i++) {
			avoids[avoidList[i]] = true;
		}
	}

	if (sFromID === sToID) return route;

	// swap from/to to match EVE client?
	tmp = sFromID;
	sFromID = sToID;
	sToID = tmp;

	// Dijkstra's to find best route given options provided
	currentID = sFromID;
	this.routeGraph[sFromID].td = 0;
	while (!this.routeGraph[sToID].visited) {
		if (currentID != sFromID) {
			// find next node to try
			test_td = -1;
			testidx = -1;
			for (i = 0; i < testset.length; i++) {
				systemID = testset[i];
				if (this.routeGraph[systemID].visited) continue;
				if (avoids[systemID]) continue;
				sys_td = this.routeGraph[systemID].td;
				if (sys_td > 0 && (test_td == -1 || sys_td < test_td)) {
					currentID = systemID;
					test_td = sys_td;
					testidx = i;
				}
			}
			if (test_td == -1) return route; // no connection
			testset.splice(testidx, 1); // remove the node we just picked from the testset
		}
		for (i = 0; i < this.routeGraph[currentID].jumps.length; i++) {
			nID = this.routeGraph[currentID].jumps[i];
			dist = 1;
			//if (avoidLow && this.routeGraph[nID].sec < 0.5 && this.routeGraph[currentID].sec >= 0.5) dist = 1000;
			if (avoidLow && this.routeGraph[nID].sec < 0.5) dist = 1000;
			//if (avoidHi && this.routeGraph[nID].sec >= 0.5 && this.routeGraph[currentID].sec < 0.5) dist = 1000;
			if (avoidHi && this.routeGraph[nID].sec >= 0.5) dist = 1000;
			td = this.routeGraph[currentID].td + dist;
			if (this.routeGraph[nID].td < 0 || this.routeGraph[nID].td > td) {
				this.routeGraph[nID].td = td;
				this.routeGraph[nID].prevID = currentID;
				testset.push(nID);
			}
		}
		this.routeGraph[currentID].visited = true;
		currentID = 0;
	}

	// get the actual route found
	prevID = this.routeGraph[sToID].prevID;
	while (prevID != sFromID) {
		route.push(parseInt(prevID, 10));
		prevID = this.routeGraph[prevID].prevID;
	}
	route.push(parseInt(sFromID, 10));
	// route.reverse();
	// route.unshift(toSystemID);
	return route;
};

},{"./Const":4,"./Promise":7,"./Utils":13,"./map.System":14,"./map.SystemIter":15,"node.extend":2}]},{},[5])(5)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
